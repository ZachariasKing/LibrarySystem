#BlueJ class context
comment0.target=Library
comment0.text=\r\n\ The\ Library\ class\ stores\ LibraryItem\ objects\ in\ a\ collection\ and\ it\ is\ also\r\n\ the\ class\ that\ represents\ the\ library\ itself\ in\ the\ University\ library\ system.\r\n\ \r\n\ Display\ of\ the\ Library\ items\ is\ currently\ simulated\ by\ printing\ the\ details\ to\ the\ terminal\ window.\r\n\r\n\ @author\ Zacharias\ King\r\n\ @version\ 14/04/2018\r\n
comment1.params=
comment1.target=Library()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Library\r\n
comment10.params=
comment10.target=void\ readData()
comment10.text=\r\n\ This\ method\ uses\ the\ FileDialog\ class\ to\ open\ a\ data\ file\ and\ read\ in\ the\ file\ name\ to\ \r\n\ the\ File\ class\ which\ represents\ the\ file\ we\ have\ selected.\ This\ file\ is\ then\ scanned\r\n\ using\ the\ first\ Scanner\ object\ we\ have\ created\ and\ we\ pass\ a\ second\ Scanner\ object\r\n\ to\ a\ particular\ class\ to\ extract\ the\ data\ depending\ on\ the\ type\ of\ data\ we\ are\ reading\ in.\r\n\ \r\n
comment11.params=fileName
comment11.target=void\ testReadData(java.lang.String)
comment11.text=\r\n\ This\ method\ is\ similar\ to\ the\ one\ above,\ excpet\ it\ has\ a\ parameter\ for\ which\ we\ can\ pass\ the\ filename.\r\n\ This\ allows\ us\ to\ automate\ the\ process\ of\ reading\ a\ file\ during\ testing\ rather\ than\ opening\ a\ file\ dialog\ box\r\n\ which\ slows\ down\ the\ testing\ process\r\n\ \r\n\ @param\ filename\ the\ name\ of\ the\ file\ we\ want\ to\ examine\ during\ testing\r\n\ \r\n
comment12.params=file
comment12.target=void\ testWriteUserData(java.lang.String)
comment12.text=\r\n\ This\ method\ takes\ a\ string\ as\ an\ argument\ which\ it\ uses\ as\ a\ file\ name\ to\ write\ to\ by\ passing\ it\ to\ a\ <code>PrintWriter</code>\ object's\ parameters.\ \r\n\ The\ actual\ writing\ of\ the\ data\ is\ carried\ out\ in\ the\ LibraryUser\ class\ as\ a\ matter\ of\ high\ cohesion.\ \r\n\ \r\n\ @param\ file\ is\ the\ name\ of\ the\ file\ we\ want\ to\ write\ to.\ If\ this\ file\ is\ not\ currently\ present,\ a\ new\ '.txt'\ file\r\n\ with\ that\ name\ will\ be\ created.\r\n
comment13.params=
comment13.target=void\ writeUserData()
comment13.text=\r\n\ This\ method\ takes\ a\ string\ as\ an\ argument\ which\ it\ uses\ as\ a\ file\ name\ to\ write\ to\ by\ passing\ it\ to\ a\ <code>PrintWriter</code>\ object's\ parameters.\ \r\n\ The\ actual\ writing\ of\ the\ data\ is\ carried\ out\ in\ the\ LibraryUser\ class\ as\ a\ matter\ of\ high\ cohesion.\ \r\n\ \r\n
comment14.params=
comment14.target=void\ writeItemReservationData()
comment14.text=\r\n\ This\ method\ takes\ a\ string\ as\ an\ argument\ which\ it\ uses\ as\ a\ file\ name\ to\ write\ to\ by\ passing\ it\ to\ a\ <code>PrintWriter</code>\ object's\ parameters.\ \r\n\ The\ actual\ writing\ of\ the\ data\ is\ carried\ out\ in\ the\ ItemReservation\ class\ as\ a\ matter\ of\ high\ cohesion.\ \r\n\ \r\n
comment15.params=file
comment15.target=void\ testWriteItemReservationData(java.lang.String)
comment15.text=\r\n\ This\ method\ takes\ a\ string\ as\ an\ argument\ which\ it\ uses\ as\ a\ file\ name\ to\ write\ to\ by\ passing\ it\ to\ a\ <code>PrintWriter</code>\ object's\ parameters.\ \r\n\ The\ actual\ writing\ of\ the\ data\ is\ carried\ out\ in\ the\ ItemReservation\ class\ as\ a\ matter\ of\ high\ cohesion.\ \r\n\ \r\n\ @param\ file\ this\ is\ the\ name\ we\ want\ to\ give\ to\ the\ file\ we\ are\ writing\ to\ or\ the\ name\ of\ the\ file\ we\ want\ to\ append\ data\ to.\r\n\ \r\n
comment16.params=
comment16.target=void\ clearItemMap()
comment16.text=\r\n\ This\ method\ clears\ all\ objects\ in\ the\ itemList\ <code>HashMap</code>\r\n
comment17.params=
comment17.target=void\ clearUserMap()
comment17.text=\r\n\ This\ method\ clears\ all\ objects\ in\ the\ users\ <code>HashMap</code>\r\n
comment18.params=
comment18.target=void\ clearReservationMap()
comment18.text=\r\n\ This\ method\ clears\ all\ objects\ in\ the\ item\ reservation\ <code>HashMap</code>\r\n
comment19.params=userID\ itemCode\ startDate\ noOfDays
comment19.target=boolean\ makeItemReservation(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment19.text=\r\n\ This\ method\ simulates\ making\ a\ reservation\ for\ an\ item\ in\ the\ library\ by\ firstly,\ checking\ if\ the\ the\ items\ and\ users\ actually\ exist\ in\ the\ \r\n\ appropriate\ <code>HashMap</code>\ and\ then\ creating\ an\ ItemReservation\ object\ and\ generating\ a\ reservation\ number\ for\ it.\r\n\ \r\n\ @param\ userID\ this\ is\ the\ unique\ user\ ID\ of\ the\ user\ who\ is\ making\ the\ reservation\r\n\ @param\ itemCode\ this\ is\ the\ unique\ item\ code\ of\ the\ item\ being\ reserved\ \r\n\ @param\ startDate\ this\ is\ the\ date,\ passed\ to\ the\ method\ as\ a\ string,\ that\ the\ reservation\ starts\r\n\ @param\ noOfDays\ this\ is\ the\ length\ of\ the\ item\ reservation\r\n\ \r\n
comment2.params=
comment2.target=java.util.Map\ getReservationMap()
comment2.text=\r\n\ This\ method\ retrieves\ the\ itemReservationMap\ variable\r\n\ \r\n\ @return\ this\ returns\ the\ itemReservationMap<code>HashMap</code>\r\n
comment20.params=
comment20.target=void\ printItemReservations()
comment20.text=\r\n\ \ This\ method\ loops\ through\ each\ ItemReservation\ object,\ printing\ it's\ details.\ This\ method\ only\ prints\ details\ if\ item\ reservations\ actually\ exist\ within\ the\ Map;\r\n\ \ if\ not,\ we\ recieve\ an\ error\ message\ at\ the\ terminal\ notifying\ us\ that\ no\ item\ reservations\ are\ present.\r\n
comment21.params=startDate\ endDate
comment21.target=void\ printDiaryEntries(java.lang.String,\ java.lang.String)
comment21.text=\r\n\ Using\ a\ start\ date\ and\ end\ date\ as\ arguments,\ this\ method\ prints\ out\ any\ reservations\ made\ within\ those\ dates,\ meaning\ they\ are\ stored\ as\ entries\ in\ the\ diary\r\n\ as\ well\ as\ being\ stored\ in\ this\ class\ as\ objects\ in\ a\ Map.\r\n\ \r\n\ @param\ startDate\ this\ is\ the\ start\ date\ of\ the\ reservation\ term\ a\ user\ wants\ to\ view\r\n\ @param\ endDate\ this\ is\ the\ end\ date\ of\ the\ reservation\ term\ a\ user\ wants\ to\ view\r\n
comment22.params=itemReservationNo
comment22.target=void\ deleteItemReservation(java.lang.String)
comment22.text=\r\n\ This\ method\ deletes\ any\ item\ reservation\ using\ the\ unique\ item\ reservation\ number\ given\ to\ it\ as\ an\ argument.\r\n\ Entries\ are\ deleted\ from\ the\ diary\ and\ objects\ removed\ from\ the\ itemReservationMap.\r\n\ \r\n\ @param\ itemReservationNo\ this\ is\ the\ item\ reservation\ number\ for\ the\ item\ reservation\ the\ user\ wants\ to\ delete\r\n
comment3.params=itemCode
comment3.target=LibraryItem\ getItem(java.lang.String)
comment3.text=\r\n\ This\ method\ retrieves\ a\ LibraryItem\ object\ from\ the\ userMap\ if\ there\ is\ an\ object\ that\ exists\ with\ the\ itemCode\ given\ as\ an\ argument.\r\n\ \r\n\ @param\ itemCode\ this\ is\ the\ item\ code\ of\ the\ LibraryItem\ we\ want\ to\ retrieve\ from\ the\ itemsMap\r\n\ @return\ the\ LibraryItem\ object\ if\ it\ exists\ in\ the\ itemsMap\ <code>HashMap</code>\ otherwise\ we\ return\ null\ here\r\n
comment4.params=userID
comment4.target=LibraryUser\ getUser(java.lang.String)
comment4.text=\r\n\ This\ method\ retrieves\ a\ LibraryUser\ object\ from\ the\ userMap\ if\ there\ is\ an\ object\ that\ exists\ with\ the\ userID\ given\ as\ an\ argument.\r\n\ \r\n\ @param\ userID\ this\ is\ the\ user\ ID\ of\ the\ LibraryUser\ we\ want\ to\ retrieve\ from\ the\ userMap\r\n\ @return\ the\ LibraryUser\ object\ if\ it\ exists\ in\ the\ userMap\ <code>HashMap</code>\ otherwise\ we\ return\ null\ here\r\n
comment5.params=reservationNo
comment5.target=ItemReservation\ getItemReservation(java.lang.String)
comment5.text=\r\n\ This\ method\ retrieves\ an\ itemReservation\ object\ from\ the\ itemReservationMap\ if\ there\ is\ an\ object\ that\ exists\ with\ the\ reservationNo\ given\ as\ an\ argument.\r\n\ \r\n\ @param\ reservationNo\ this\ is\ the\ reservation\ number\ of\ the\ item\ reservation\ we\ want\ to\ retrieve\ from\ the\ itemReservationMap\r\n\ @return\ the\ ItemReservation\ object\ if\ it\ exists\ in\ the\ itemReservationMap\ <code>HashMap</code>\ otherwise\ we\ return\ null\ here\r\n
comment6.params=item
comment6.target=void\ storeItem(LibraryItem)
comment6.text=\r\n\ This\ method\ adds\ a\ LibraryItem\ object\ to\ the\ <code>HashMap</code>\ itemsMap\r\n\ \r\n\ @param\ item\ the\ item\ we\ want\ to\ add\ to\ itemsMap\r\n
comment7.params=user
comment7.target=void\ storeUser(LibraryUser)
comment7.text=\r\n\ This\ method\ adds\ a\ LibraryUser\ object\ to\ the\ <code>HashMap</code>\ userMap.\ It\ uses\ a\ while\ loop\ in\ a\ second\ if\ statment\ in\ order\ to\ ensure\r\n\ that\ each\ userID\ is\ unique\ to\ that\ user.\ This\ is\ important\ because\ if\ two\ users\ had\ the\ same\ IDs,\ the\ HashMap\ would\ just\ overwrite\ the\ older\ user\ and\ therfore,\ it\ would\ \r\n\ no\ longer\ exist\ in\ the\ HashMap.\r\n\ \r\n\ @param\ user\ the\ user\ we\ want\ to\ add\ to\ users\ (HashMap)\r\n
comment8.params=reservation
comment8.target=void\ storeItemReservation(ItemReservation)
comment8.text=\r\n\ This\ method\ adds\ an\ ItemReservation\ object\ to\ the\ <code>HashMap</code>\ itemReservationMap\r\n\ \r\n\ @param\ item\ the\ item\ we\ want\ to\ add\ to\ itemsMap\r\n
comment9.params=
comment9.target=void\ printAllDetails()
comment9.text=\r\n\ If\ itemsList\ and\ users\ aren't\ empty,\ this\ method\ loops\ through\ every\ object\ in\ itemsList\ and\ users\ and\ will\ print\ out\ all\ of\ the\ details\r\n\ of\ each\ LibraryItem\ and/or\ each\ LibraryUser.\ Dynamic\ method\ lookup\ will\ work\ at\ runtime\ in\ order\ to\ print\ out\ all\ the\ correct\ details.\r\n
numComments=23
